type: edu
custom_name: stage3
files:
- name: hacking/hack.py
  visible: true
  text: |-
    # write your code here
    import argparse
    import socket
    import itertools


    def send_message(host, port, msg):
        """
        send a message to the given host

        :param host: given host
        :param port: port of the host
        :param msg: message to send
        :return: None
        """
        with socket.socket() as client_socket:
            client_socket.connect((host, int(port)))
            client_socket.send(msg.encode())
            response = client_socket.recv(1024).decode()
            print(response)


    def try_password(host, port):
        """
        Try the password from a to z and numbers 0 to 9
        :param host: given host
        :param port: port of the host
        :return:
        """
        with socket.socket() as client_socket:
            client_socket.connect((host, int(port)))
            pwd_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
                            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0',
                            '1', '2', '3', '4', '5', '6', '7', '8', '9']
            digits = 1
            while True:
                for possible_pwd in itertools.product(pwd_alphabet, repeat=digits):
                    possible_pwd = ''.join(possible_pwd)
                    client_socket.send(possible_pwd.encode())
                    response = client_socket.recv(1024).decode()
                    if (response == "Connection success!") or (response == "Too many attempts"):
                        break
                if response == "Wrong password!":
                    digits += 1
                elif response == "Connection success!":
                    print(possible_pwd)
                    break
                else:
                    break


    if __name__ == '__main__':
        parser = argparse.ArgumentParser(description="send a message to the given host")
        parser.add_argument("host")
        parser.add_argument("port")
        # parser.add_argument("msg")

        args = parser.parse_args()
        # send_message(host=args.host, port=args.port, msg=args.msg)
        try_password(host=args.host, port=args.port)
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from threading import Thread
    from time import sleep
    import socket
    import random

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    abc = 'abcdefghijklmnopqrstuvwxyz1234567890'


    passwords = [
        'chance', 'frankie', 'killer', 'forest', 'penguin'
        'jackson', 'rangers', 'monica', 'qweasdzxc', 'explorer'
        'gabriel', 'chelsea', 'simpsons', 'duncan', 'valentin',
        'classic', 'titanic', 'logitech', 'fantasy', 'scotland',
        'pamela', 'christin', 'birdie', 'benjamin', 'jonathan',
        'knight', 'morgan', 'melissa', 'darkness', 'cassie'
    ]


    def generate_password():
        '''function - generator of all passwords from dictionary'''
        for password in passwords:
            yield password.rstrip().lower()


    def random_password():
        '''function - generating random password from dictionary'''
        pas = random.choice(list(generate_password()))
        uppers = []
        for i in range(len(pas)):
            uppers.append(random.randint(0, 1))

        return ''.join(
            pas[j].upper() if uppers[j] == 1
            else pas[j]
            for j in range(len(pas)))


    class Hacking(StageTest):

        def __init__(self, module):
            super().__init__(module)
            self.ready = False
            self.sock = None
            self.serv = None
            self.connected = False
            self.message = []
            self.password = None

        def start_server(self):
            self.serv = Thread(target=lambda: self.server())
            self.serv.start()
            self.ready = False
            while not self.ready:
                try:
                    sleep(0.1)  # socket needs to be set up before test
                except KeyboardInterrupt:
                    pass

        def stop_server(self):
            self.sock.close()
            self.serv.join()

        def server(self):
            '''function - creating a server and answering clients'''
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.sock.bind(('localhost', 9090))
            self.ready = True
            try:
                self.sock.listen(1)
                conn, addr = self.sock.accept()
                self.connected = True
                conn.settimeout(15)
                while True:
                    data = conn.recv(1024)
                    self.message.append(data.decode('utf8'))
                    if len(self.message) > 1_000_000:
                        conn.send('Too many attempts to connect!'.encode('utf8'))
                        break
                    if not data:
                        break
                    if data.decode('utf8') == self.password:
                        conn.send('Connection success!'.encode('utf8'))
                        break
                    else:
                        conn.send('Wrong password!'.encode('utf8'))
                conn.close()
            except:
                pass

        def generate(self):
            self.message = []
            self.password = random_password()
            self.start_server()
            return [TestCase(args=['localhost', '9090'],
                             attach=[self.password])]

        def check(self, reply, attach):
            self.stop_server()

            if not self.connected:
                return CheckResult.wrong("You didn't connect to the server")

            real_password = attach[0]
            printed_password = reply.split('\n')[0]
            if reply.split('\n')[0] != real_password:
                return CheckResult.wrong(
                    'The password you printed is not correct\n'
                    'You printed: \"' + printed_password + '\"\n'
                    'Correct password: \"' + real_password + '\"'
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        test = Hacking('hacking.hack')
        test.run_tests()
        test.stop_server()
  learner_created: false
- name: passwords.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/80/stages/444/implement#comment
status: Solved
record: 2
